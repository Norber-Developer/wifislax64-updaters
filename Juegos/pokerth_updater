#!/bin/sh

# Script by www.seguridadwireless.net

SCRIPT_VERSION=20170104

############################################################
## Funciones comunes. Su nombre empieza por f_            ##
############################################################
f_variables(){
	. /opt/wifislax-updaters/Funciones/funciones_updater
}

############################################################
## Funciones propias del script. Su nombre empieza por F_ ##
############################################################
# Definicion de variables
F_variables() {
	PRGNAM=pokerth
	echo -ne "\033]2;${PRGNAM}_updater\007"
	WEB=https://sourceforge.net/projects/$PRGNAM/files/$PRGNAM/
	VERSION=`curl -s $WEB|grep -i latest|grep -Po 'PokerTH-\K.*(?=")'|cut -d- -f-1`
	EXTENSION=tar.bz2
	SRCNAM=PokerTH-$VERSION-src
	SOURCES=$SRCNAM.$EXTENSION
	DOWNLOAD=https://downloads.sourceforge.net/$PRGNAM/$SOURCES
}

# Comprobar dependencias
F_dependencias(){
DEPENDENCIAS="libgsasl libircclient tinyxml pytz six python-dateutil python-gflags protobuf"
f_dependencias
}

# Descomprimimos el fichero descargado y compilamos
F_compilar(){
echo ""
echo "$VERDE"Compilamos ..."$CIERRE"
sleep 1

if [ $VERSION = 1.1.1 ]; then
SLACK=$(cat /etc/slapt-get/slapt-getrc|grep SOURCE|head -1|rev|cut -d- -f-1|rev|sed 's/.$//g')
if [ $SLACK = current ]; then
echo "RnJvbTogSm9uYXRoYW4gV2FrZWx5IDxnaXRodWJAa2F5YXJpLm9yZz4KRGF0ZTogVGh1LCAyNiBO
b3YgMjAxNSAxNjoyNzo1MiArMDAwMApTdWJqZWN0OiBRdWFsaWZ5IHN0ZDo6aWZzdHJlYW0gYW5k
IHN0ZDo6b2ZzdHJlYW0KClN0YXJ0aW5nIHdpdGggQm9vc3QgMS42MC4wIDxib29zdC9maWxlc3lz
dGVtLmhwcD4gaW5jbHVkZXMKPGJvb3N0L2ZpbGVzeXN0ZW0vZnN0cmVhbS5ocHA+LCB3aGljaCBk
ZWNsYXJlcyBpZnN0cmVhbSBhbmQgb2ZzdHJlYW0KdHlwZXMgdGhhdCBtYWtlIHRoZSB1bnF1YWxp
ZmllZCBuYW1lcyBpZnN0cmVhbSBhbmQgb2ZzdHJlYW0gYW1iaWd1b3VzLgpUaGUgbmFtZXMgbXVz
dCBiZSBxdWFsaWZpZWQgdG8gcmVmZXIgdG8gdGhlIHN0ZCB2ZXJzaW9ucy4KClVwc3RyZWFtIHB1
bGwgcmVxdWVzdCBhdDogaHR0cHM6Ly9naXRodWIuY29tL3Bva2VydGgvcG9rZXJ0aC9wdWxsLzI5
OQotLS0KIHNyYy9jb3JlL2NvbW1vbi9hdmF0YXJtYW5hZ2VyLmNwcCAgICB8IDQgKystLQogc3Jj
L2NvcmUvY29tbW9uL2xvZ2hlbHBlcl9zZXJ2ZXIuY3BwIHwgNiArKystLS0KIHNyYy9uZXQvY29t
bW9uL2NsaWVudHN0YXRlLmNwcCAgICAgICB8IDQgKystLQogc3JjL25ldC9jb21tb24vY2xpZW50
dGhyZWFkLmNwcCAgICAgIHwgNCArKy0tCiBzcmMvbmV0L2NvbW1vbi9kb3dubG9hZGVydGhyZWFk
LmNwcCAgfCAyICstCiBzcmMvcG9rZXJ0aF9zZXJ2ZXIuY3BwICAgICAgICAgICAgICAgfCAyICst
CiBzcmMvemxpYl9jb21wcmVzcy5jcHAgICAgICAgICAgICAgICAgfCA0ICsrLS0KIDcgZmlsZXMg
Y2hhbmdlZCwgMTMgaW5zZXJ0aW9ucygrKSwgMTMgZGVsZXRpb25zKC0pCgpkaWZmIC0tZ2l0IGEv
c3JjL2NvcmUvY29tbW9uL2F2YXRhcm1hbmFnZXIuY3BwIGIvc3JjL2NvcmUvY29tbW9uL2F2YXRh
cm1hbmFnZXIuY3BwCmluZGV4IGQ5YjlmZDQuLmQxMzdhNWMgMTAwNjQ0Ci0tLSBhL3NyYy9jb3Jl
L2NvbW1vbi9hdmF0YXJtYW5hZ2VyLmNwcAorKysgYi9zcmMvY29yZS9jb21tb24vYXZhdGFybWFu
YWdlci5jcHAKQEAgLTYxLDcgKzYxLDcgQEAgdXNpbmcgbmFtZXNwYWNlIHN0ZDsKIHVzaW5nIG5h
bWVzcGFjZSBib29zdDo6ZmlsZXN5c3RlbTsKIAogc3RydWN0IEF2YXRhckZpbGVTdGF0ZSB7Ci0J
aWZzdHJlYW0JCWlucHV0U3RyZWFtOworCXN0ZDo6aWZzdHJlYW0JCWlucHV0U3RyZWFtOwogfTsK
IAogQXZhdGFyTWFuYWdlcjo6QXZhdGFyTWFuYWdlcihib29sIHVzZUV4dGVybmFsU2VydmVyLCBj
b25zdCBzdGQ6OnN0cmluZyAmZXh0ZXJuYWxTZXJ2ZXJBZGRyZXNzLApAQCAtMzYzLDcgKzM2Myw3
IEBAIEF2YXRhck1hbmFnZXI6OlN0b3JlQXZhdGFySW5DYWNoZShjb25zdCBNRDVCdWYgJm1kNWJ1
ZiwgQXZhdGFyRmlsZVR5cGUgYXZhdGFyRmlsCiAJCQkJcGF0aCB0bXBQYXRoKGNhY2hlRGlyKTsK
IAkJCQl0bXBQYXRoIC89IChtZDVidWYuVG9TdHJpbmcoKSArIGV4dCk7CiAJCQkJc3RyaW5nIGZp
bGVOYW1lKHRtcFBhdGguZmlsZV9zdHJpbmcoKSk7Ci0JCQkJb2ZzdHJlYW0gbyhmaWxlTmFtZS5j
X3N0cigpLCBpb3NfYmFzZTo6b3V0IHwgaW9zX2Jhc2U6OmJpbmFyeSB8IGlvc19iYXNlOjp0cnVu
Yyk7CisJCQkJc3RkOjpvZnN0cmVhbSBvKGZpbGVOYW1lLmNfc3RyKCksIGlvc19iYXNlOjpvdXQg
fCBpb3NfYmFzZTo6YmluYXJ5IHwgaW9zX2Jhc2U6OnRydW5jKTsKIAkJCQlpZiAoIW8uZmFpbCgp
KSB7CiAJCQkJCW8ud3JpdGUoKGNvbnN0IGNoYXIgKilkYXRhLCBzaXplKTsKIAkJCQkJby5jbG9z
ZSgpOwpkaWZmIC0tZ2l0IGEvc3JjL2NvcmUvY29tbW9uL2xvZ2hlbHBlcl9zZXJ2ZXIuY3BwIGIv
c3JjL2NvcmUvY29tbW9uL2xvZ2hlbHBlcl9zZXJ2ZXIuY3BwCmluZGV4IGY3OWU0Y2EuLmEwZDAz
NTAgMTAwNjQ0Ci0tLSBhL3NyYy9jb3JlL2NvbW1vbi9sb2doZWxwZXJfc2VydmVyLmNwcAorKysg
Yi9zcmMvY29yZS9jb21tb24vbG9naGVscGVyX3NlcnZlci5jcHAKQEAgLTY3LDcgKzY3LDcgQEAg
dm9pZAogaW50ZXJuYWxfbG9nX2Vycihjb25zdCBzdHJpbmcgJm1zZykKIHsKIAlpZiAoIWdfbG9n
RmlsZS5lbXB0eSgpKSB7Ci0JCW9mc3RyZWFtIG8oZ19sb2dGaWxlLmNfc3RyKCksIGlvc19iYXNl
OjpvdXQgfCBpb3NfYmFzZTo6YXBwKTsKKwkJc3RkOjpvZnN0cmVhbSBvKGdfbG9nRmlsZS5jX3N0
cigpLCBpb3NfYmFzZTo6b3V0IHwgaW9zX2Jhc2U6OmFwcCk7CiAJCWlmICghby5mYWlsKCkpIHsK
IAkJCW8gPDwgc2Vjb25kX2Nsb2NrOjpsb2NhbF90aW1lKCkgPDwgIiBFUlI6ICIgPDwgbXNnOwog
CQkJby5mbHVzaCgpOwpAQCAtODAsNyArODAsNyBAQCBpbnRlcm5hbF9sb2dfbXNnKGNvbnN0IHN0
ZDo6c3RyaW5nICZtc2cpCiB7CiAJaWYgKGdfbG9nTGV2ZWwpIHsKIAkJaWYgKCFnX2xvZ0ZpbGUu
ZW1wdHkoKSkgewotCQkJb2ZzdHJlYW0gbyhnX2xvZ0ZpbGUuY19zdHIoKSwgaW9zX2Jhc2U6Om91
dCB8IGlvc19iYXNlOjphcHApOworCQkJc3RkOjpvZnN0cmVhbSBvKGdfbG9nRmlsZS5jX3N0cigp
LCBpb3NfYmFzZTo6b3V0IHwgaW9zX2Jhc2U6OmFwcCk7CiAJCQlpZiAoIW8uZmFpbCgpKQogCQkJ
CW8gPDwgc2Vjb25kX2Nsb2NrOjpsb2NhbF90aW1lKCkgPDwgIiBNU0c6ICIgPDwgbXNnOwogCQl9
CkBAIC05Miw3ICs5Miw3IEBAIGludGVybmFsX2xvZ19sZXZlbChjb25zdCBzdGQ6OnN0cmluZyAm
bXNnLCBpbnQgbG9nTGV2ZWwpCiB7CiAJaWYgKGdfbG9nTGV2ZWwgPj0gbG9nTGV2ZWwpIHsKIAkJ
aWYgKCFnX2xvZ0ZpbGUuZW1wdHkoKSkgewotCQkJb2ZzdHJlYW0gbyhnX2xvZ0ZpbGUuY19zdHIo
KSwgaW9zX2Jhc2U6Om91dCB8IGlvc19iYXNlOjphcHApOworCQkJc3RkOjpvZnN0cmVhbSBvKGdf
bG9nRmlsZS5jX3N0cigpLCBpb3NfYmFzZTo6b3V0IHwgaW9zX2Jhc2U6OmFwcCk7CiAJCQlpZiAo
IW8uZmFpbCgpKQogCQkJCW8gPDwgc2Vjb25kX2Nsb2NrOjpsb2NhbF90aW1lKCkgPDwgIiBPVVQ6
ICIgPDwgbXNnOwogCQl9CmRpZmYgLS1naXQgYS9zcmMvbmV0L2NvbW1vbi9jbGllbnRzdGF0ZS5j
cHAgYi9zcmMvbmV0L2NvbW1vbi9jbGllbnRzdGF0ZS5jcHAKaW5kZXggODQ5MjFjZS4uNThmZDVm
YiAxMDA2NDQKLS0tIGEvc3JjL25ldC9jb21tb24vY2xpZW50c3RhdGUuY3BwCisrKyBiL3NyYy9u
ZXQvY29tbW9uL2NsaWVudHN0YXRlLmNwcApAQCAtMzAyLDggKzMwMiw4IEBAIENsaWVudFN0YXRl
UmVhZGluZ1NlcnZlckxpc3Q6OkVudGVyKGJvb3N0OjpzaGFyZWRfcHRyPENsaWVudFRocmVhZD4g
Y2xpZW50KQogCiAJCS8vIFVuemlwIHRoZSBmaWxlIHVzaW5nIHpsaWIuCiAJCXRyeSB7Ci0JCQlp
ZnN0cmVhbSBpbkZpbGUoemlwcGVkU2VydmVyTGlzdFBhdGguZGlyZWN0b3J5X3N0cmluZygpLmNf
c3RyKCksIGlvc19iYXNlOjppbiB8IGlvc19iYXNlOjpiaW5hcnkpOwotCQkJb2ZzdHJlYW0gb3V0
RmlsZSh4bWxTZXJ2ZXJMaXN0UGF0aC5kaXJlY3Rvcnlfc3RyaW5nKCkuY19zdHIoKSwgaW9zX2Jh
c2U6Om91dCB8IGlvc19iYXNlOjp0cnVuYyk7CisJCQlzdGQ6Omlmc3RyZWFtIGluRmlsZSh6aXBw
ZWRTZXJ2ZXJMaXN0UGF0aC5kaXJlY3Rvcnlfc3RyaW5nKCkuY19zdHIoKSwgaW9zX2Jhc2U6Omlu
IHwgaW9zX2Jhc2U6OmJpbmFyeSk7CisJCQlzdGQ6Om9mc3RyZWFtIG91dEZpbGUoeG1sU2VydmVy
TGlzdFBhdGguZGlyZWN0b3J5X3N0cmluZygpLmNfc3RyKCksIGlvc19iYXNlOjpvdXQgfCBpb3Nf
YmFzZTo6dHJ1bmMpOwogCQkJYm9vc3Q6Omlvc3RyZWFtczo6ZmlsdGVyaW5nX3N0cmVhbWJ1Zjxi
b29zdDo6aW9zdHJlYW1zOjppbnB1dD4gaW47CiAJCQlpbi5wdXNoKGJvb3N0Ojppb3N0cmVhbXM6
OnpsaWJfZGVjb21wcmVzc29yKCkpOwogCQkJaW4ucHVzaChpbkZpbGUpOwpkaWZmIC0tZ2l0IGEv
c3JjL25ldC9jb21tb24vY2xpZW50dGhyZWFkLmNwcCBiL3NyYy9uZXQvY29tbW9uL2NsaWVudHRo
cmVhZC5jcHAKaW5kZXggYzM2ZTk0YS4uNDViNzljYiAxMDA2NDQKLS0tIGEvc3JjL25ldC9jb21t
b24vY2xpZW50dGhyZWFkLmNwcAorKysgYi9zcmMvbmV0L2NvbW1vbi9jbGllbnR0aHJlYWQuY3Bw
CkBAIC0xNjA0LDcgKzE2MDQsNyBAQCB2b2lkCiBDbGllbnRUaHJlYWQ6OlJlYWRTZXNzaW9uR3Vp
ZEZyb21GaWxlKCkKIHsKIAlzdHJpbmcgZ3VpZEZpbGVOYW1lKEdldENvbnRleHQoKS5HZXRDYWNo
ZURpcigpICsgVEVNUF9HVUlEX0ZJTEVOQU1FKTsKLQlpZnN0cmVhbSBndWlkU3RyZWFtKGd1aWRG
aWxlTmFtZS5jX3N0cigpLCBpb3M6OmluIHwgaW9zOjpiaW5hcnkpOworCXN0ZDo6aWZzdHJlYW0g
Z3VpZFN0cmVhbShndWlkRmlsZU5hbWUuY19zdHIoKSwgaW9zOjppbiB8IGlvczo6YmluYXJ5KTsK
IAlpZiAoZ3VpZFN0cmVhbS5nb29kKCkpIHsKIAkJc3RkOjp2ZWN0b3I8Y2hhcj4gdG1wR3VpZChD
TElFTlRfR1VJRF9TSVpFKTsKIAkJZ3VpZFN0cmVhbS5yZWFkKCZ0bXBHdWlkWzBdLCBDTElFTlRf
R1VJRF9TSVpFKTsKQEAgLTE2MTYsNyArMTYxNiw3IEBAIHZvaWQKIENsaWVudFRocmVhZDo6V3Jp
dGVTZXNzaW9uR3VpZFRvRmlsZSgpIGNvbnN0CiB7CiAJc3RyaW5nIGd1aWRGaWxlTmFtZShHZXRD
b250ZXh0KCkuR2V0Q2FjaGVEaXIoKSArIFRFTVBfR1VJRF9GSUxFTkFNRSk7Ci0Jb2ZzdHJlYW0g
Z3VpZFN0cmVhbShndWlkRmlsZU5hbWUuY19zdHIoKSwgaW9zOjpvdXQgfCBpb3M6OnRydW5jIHwg
aW9zOjpiaW5hcnkpOworCXN0ZDo6b2ZzdHJlYW0gZ3VpZFN0cmVhbShndWlkRmlsZU5hbWUuY19z
dHIoKSwgaW9zOjpvdXQgfCBpb3M6OnRydW5jIHwgaW9zOjpiaW5hcnkpOwogCWlmIChndWlkU3Ry
ZWFtLmdvb2QoKSkgewogCQlndWlkU3RyZWFtLndyaXRlKEdldENvbnRleHQoKS5HZXRTZXNzaW9u
R3VpZCgpLmNfc3RyKCksIEdldENvbnRleHQoKS5HZXRTZXNzaW9uR3VpZCgpLnNpemUoKSk7CiAJ
fQpkaWZmIC0tZ2l0IGEvc3JjL25ldC9jb21tb24vZG93bmxvYWRlcnRocmVhZC5jcHAgYi9zcmMv
bmV0L2NvbW1vbi9kb3dubG9hZGVydGhyZWFkLmNwcAppbmRleCBlNThlM2Y4Li41NmE5NTI2IDEw
MDY0NAotLS0gYS9zcmMvbmV0L2NvbW1vbi9kb3dubG9hZGVydGhyZWFkLmNwcAorKysgYi9zcmMv
bmV0L2NvbW1vbi9kb3dubG9hZGVydGhyZWFkLmNwcApAQCAtOTYsNyArOTYsNyBAQCBEb3dubG9h
ZGVyVGhyZWFkOjpNYWluKCkKIAkJCQkvLyBQcmV2aW91cyBkb3dubG9hZCB3YXMgZmluaXNoZWQu
CiAJCQkJaWYgKG1fY3VyRG93bmxvYWREYXRhKSB7CiAJCQkJCXBhdGggZmlsZXBhdGgobV9jdXJE
b3dubG9hZERhdGEtPmZpbGVuYW1lKTsKLQkJCQkJaWZzdHJlYW0gaW5zdHJlYW0oZmlsZXBhdGgu
ZmlsZV9zdHJpbmcoKS5jX3N0cigpLCBpb3NfYmFzZTo6aW4gfCBpb3NfYmFzZTo6YmluYXJ5KTsK
KwkJCQkJc3RkOjppZnN0cmVhbSBpbnN0cmVhbShmaWxlcGF0aC5maWxlX3N0cmluZygpLmNfc3Ry
KCksIGlvc19iYXNlOjppbiB8IGlvc19iYXNlOjpiaW5hcnkpOwogCQkJCQkvLyBGaW5kIG91dCBm
aWxlIHNpemUuCiAJCQkJCS8vIE5vdCBmdWxseSBwb3J0YWJsZSwgYnV0IHdvcmtzIG9uIHdpbi9s
aW51eC9tYWMuCiAJCQkJCWluc3RyZWFtLnNlZWtnKDAsIGlvc19iYXNlOjpiZWcpOwpkaWZmIC0t
Z2l0IGEvc3JjL3Bva2VydGhfc2VydmVyLmNwcCBiL3NyYy9wb2tlcnRoX3NlcnZlci5jcHAKaW5k
ZXggM2I5M2Q0Ni4uNDUwYTQ3ZSAxMDA2NDQKLS0tIGEvc3JjL3Bva2VydGhfc2VydmVyLmNwcAor
KysgYi9zcmMvcG9rZXJ0aF9zZXJ2ZXIuY3BwCkBAIC0xNjEsNyArMTYxLDcgQEAgbWFpbihpbnQg
YXJnYywgY2hhciAqYXJndltdKQogCQlwaWRGaWxlID0gdG1wUGlkUGF0aC5kaXJlY3Rvcnlfc3Ry
aW5nKCk7CiAJfQogCXsKLQkJb2ZzdHJlYW0gcGlkU3RyZWFtKHBpZEZpbGUuY19zdHIoKSwgaW9z
X2Jhc2U6Om91dCB8IGlvc19iYXNlOjp0cnVuYyk7CisJCXN0ZDo6b2ZzdHJlYW0gcGlkU3RyZWFt
KHBpZEZpbGUuY19zdHIoKSwgaW9zX2Jhc2U6Om91dCB8IGlvc19iYXNlOjp0cnVuYyk7CiAJCWlm
ICghcGlkU3RyZWFtLmZhaWwoKSkKIAkJCXBpZFN0cmVhbSA8PCBnZXRwaWQoKTsKIAkJZWxzZQpk
aWZmIC0tZ2l0IGEvc3JjL3psaWJfY29tcHJlc3MuY3BwIGIvc3JjL3psaWJfY29tcHJlc3MuY3Bw
CmluZGV4IGUzZmQ3MmQuLjRiMDQ4MTcgMTAwNjQ0Ci0tLSBhL3NyYy96bGliX2NvbXByZXNzLmNw
cAorKysgYi9zcmMvemxpYl9jb21wcmVzcy5jcHAKQEAgLTU5LDggKzU5LDggQEAgbWFpbihpbnQg
YXJnYywgY2hhciAqYXJndltdKQogCQlyZXR1cm4gMjsKIAl9CiAJdHJ5IHsKLQkJaWZzdHJlYW0g
aW5GaWxlKGlucHV0RmlsZVBhdGguZGlyZWN0b3J5X3N0cmluZygpLmNfc3RyKCksIGlvc19iYXNl
Ojppbik7Ci0JCW9mc3RyZWFtIG91dEZpbGUob3V0cHV0RmlsZVBhdGguZGlyZWN0b3J5X3N0cmlu
ZygpLmNfc3RyKCksIGlvc19iYXNlOjpvdXQgfCBpb3NfYmFzZTo6YmluYXJ5KTsKKwkJc3RkOjpp
ZnN0cmVhbSBpbkZpbGUoaW5wdXRGaWxlUGF0aC5kaXJlY3Rvcnlfc3RyaW5nKCkuY19zdHIoKSwg
aW9zX2Jhc2U6OmluKTsKKwkJc3RkOjpvZnN0cmVhbSBvdXRGaWxlKG91dHB1dEZpbGVQYXRoLmRp
cmVjdG9yeV9zdHJpbmcoKS5jX3N0cigpLCBpb3NfYmFzZTo6b3V0IHwgaW9zX2Jhc2U6OmJpbmFy
eSk7CiAJCWJvb3N0Ojppb3N0cmVhbXM6OmZpbHRlcmluZ19zdHJlYW1idWY8Ym9vc3Q6Omlvc3Ry
ZWFtczo6b3V0cHV0PiBvdXQ7CiAJCW91dC5wdXNoKGJvb3N0Ojppb3N0cmVhbXM6OnpsaWJfY29t
cHJlc3NvcigpKTsKIAkJb3V0LnB1c2gob3V0RmlsZSk7Cg==
"  | base64 -d > $TMP/std-ifstream-and-std-ofstream.patch
patch -p1 -i $TMP/std-ifstream-and-std-ofstream.patch || exit 1
fi
fi

sed -i "s|libircclient/||" src/net/common/ircthread.cpp

qmake pokerth.pro

make  || exit 1
make install DESTDIR=$PKG INSTALL_ROOT=$PKG

mkdir -p $PKG/usr/bin
install -s -D -m 0755 $TMP/PokerTH-$VERSION-src/bin/pokerth_server $PKG/usr/bin
}

###################################
## BLOQUE PRINCIPAL DE EJECUCION ##
###################################
# Si se cierra el script inesperadamente, ejecutar la funcion de limpieza
trap f_exitmode SIGHUP SIGINT

#Inicializamos las variables globales
f_variables
#Comprobamos conexion a Internet
f_comprobarConexion
#Inicializamos las variables del script
F_variables
#Creamos directorio de trabajo
f_directorioTemporal
#Mostramos el mensaje de presentacion
f_presentacion
#Comprobamos updates del script
f_comprobarUpdates
#Asignamos o detectamos arquitectura
f_arquitectura
#Comprobamos version instalada del script
f_versionInstalada
# Comprobar dependencias
F_dependencias
#Si no existe el fichero se descargara
f_download
#Preparamos entorno
f_preparar
#Descomprimir fichero descargado y compilamos
F_compilar
#Hacemos strip sobre el paquete
f_strip
#Creamos xzm , instalamos y salimos
f_tareasFinales