#!/bin/bash

# Script by www.seguridadwireless.net

FUNCIONES_VERSION=20160912

# Colores
CIERRE=${CIERRE:-"[0m"}
ROJO=${ROJO:-"[1;31m"}
VERDE=${VERDE:-"[1;32m"}
CYAN=${CYAN:-"[1;36m"}
AMARILLO=${AMARILLO:-"[1;33m"}
BLANCO=${BLANCO:-"[1;37m"}
ROSA=${ROSA:-"[1;35m"}

# Variables globales
PRGNAM=funciones
VERSION=$FUNCIONES_VERSION
BUILD=${BUILD:-1}
TAG=${TAG:-sw}
CWD=$(pwd)

# Set the values for some environment variables:
export MAKEFLAGS='-j '$(grep -c ^processor /proc/cpuinfo)

# Eliminamos posibles ficheros viejos de modificaciones de scripts	
rm -rf /opt/wifislax64-updaters/*/*~ &>/dev/null

# Funcion que limpia
f_exitmode() {
   rm -Rf $TMP &>/dev/null
   exit 1
}

# Funcion que muestra Presentacion
f_presentacion() {
clear
	sleep 0.1 | echo ""
	sleep 0.1 | echo ""
	sleep 0.1 | echo "$BLANCO"  "       ******************************"   
	sleep 0.1 | echo "$VERDE"   "          Actualizador/Instalador    "   
	sleep 0.1 | echo "$VERDE"   "          Paquete: "$AMARILLO"$PRGNAM"                                                 
	sleep 0.1 | echo "$VERDE"   "                                   "
	sleep 0.1 | echo "$VERDE"   "          www.seguridadwireless.net  "
	sleep 0.1 | echo "$BLANCO"  "       ******************************"
	sleep 0.1 | echo "$CERRAR"
}

# Comprobar conexion by geminis_demon
f_comprobarConexion() {
   if [ ! "$(ping google.com -c1 2>/dev/null)" ]; then
      echo "No tengo internet ... el script se cerrara."
      echo ""
      exit 1
   fi
}

# Comprobacion de updates para el script
f_comprobarUpdates() {
   SERVIDOR_WEB="https://raw.githubusercontent.com/wifislax-ng/wifislax64-updaters/master"
   DIRECTORIO=$(find /opt/wifislax64-updaters -type f -name ${PRGNAM}_updater| rev | cut -d/ -f2- | rev)
   SERVIDOR_VERSION=$(timeout -s SIGTERM 10 curl -sk $SERVIDOR_WEB/${DIRECTORIO##*/}/${PRGNAM}_updater | grep "SCRIPT_VERSION=" | head -1 |cut -d "=" -f2)

   echo ${CYAN}Version Script$CIERRE: $ROJO${SCRIPT_VERSION:6}$BLANCO/$AMARILLO${SCRIPT_VERSION:4:2}$BLANCO/$ROJO${SCRIPT_VERSION:0:4}$CIERRE

   if [ "$(ping github.com -c1 2>/dev/null)" ]; then
      if [[ $SCRIPT_VERSION -lt $SERVIDOR_VERSION ]]; then
         echo
         echo "$ROSA"Comprobando si hay actualizaciones para el script..."$CIERRE."
         echo ${ROJO}NUEVA VERSION$CIERRE
         echo
         echo ${ROSA}Version Server$CIERRE: $ROJO${SERVIDOR_VERSION:6}$BLANCO/$AMARILLO${SERVIDOR_VERSION:4:2}$BLANCO/$ROJO${SERVIDOR_VERSION:0:4}$CIERRE
         echo
         echo ${CYAN}Actualizando ${PRGNAM}_updater
         curl -sk $SERVIDOR_WEB/${DIRECTORIO##*/}/${PRGNAM}_updater -o $DIRECTORIO/${PRGNAM}_updater
         echo ${ROJO}LISTO$CIERRE
         $0
         exit
      fi
   fi
}

# Definimos arquitectura del sistema. Se le pasa la arquitectura como parametro o la calcula automaticamente si no se indica nada
f_arquitectura() {
   ARCH=$1
if [ -z "$ARCH" ]; then
  case "$( uname -m )" in
    i?86) ARCH=i586 ;;
    arm*) ARCH=arm ;;
       *) ARCH=$( uname -m ) ;;
  esac
fi

if [ "$ARCH" = "i586" ]; then
  SLKCFLAGS="-O2 -march=i586 -mtune=i686"
  LIBDIRSUFFIX=""
elif [ "$ARCH" = "i686" ]; then
  SLKCFLAGS="-O2 -march=i686 -mtune=i686"
  LIBDIRSUFFIX=""
elif [ "$ARCH" = "x86_64" ]; then
  SLKCFLAGS="-O2 -fPIC"
  LIBDIRSUFFIX="64"
else
  SLKCFLAGS="-O2"
  LIBDIRSUFFIX=""
fi

set -e
}

# Detecta la version instalada en el sistema
f_versionInstalada() {
   INSTALADA="$(ls /var/log/packages|rev|cut -d'-' -f3-|sed 's/-/ /'|rev|grep "^$PRGNAM "|cut -d' ' -f2|tail -1)"
   if [ -z $INSTALADA ];then
   INSTALADA="NO INSTALADA"
   VERSIONLOCAL=$INSTALADA
   else
   VERSIONLOCAL=$PRGNAM-$INSTALADA
   fi
   echo ""
   echo ""$AMARILLO"La version del sistema es..."$CYAN"$VERSIONLOCAL"$CIERRE""
   echo ""
   echo "__________________________________________"
   echo ""
   echo ""$AMARILLO"La version mas nueva en su pagina web es..."$CYAN"$PRGNAM-$VERSION"$CIERRE""
   echo ""
   if [ $PRGNAM = x265 ]; then
      echo "${ROJO}ADVERTENCIA:"
      echo "${BLANCO}Actualizar este paquete puede romper ${AMARILLO}ffmpeg"
      echo "${BLANCO}Es posible que necesites recompilar ${AMARILLO}ffmpeg"
      echo
   fi
   echo ""$BLANCO"Pulsa $ROJO"ENTER" $BLANCO"si deseas actualizarla""
   read junk
   echo ""

# Si el paquete esta instalado y es el mismo se sube el numero de build
if [ "$INSTALADA" = $VERSION ]; then
BUILDLOCAL="$(ls /var/log/packages/$PRGNAM-$INSTALADA-*|rev|cut -d'-' -f1|grep -o "[0-9]*"|rev|tail -1)"
BUILD=`expr $BUILDLOCAL + 1`
fi

# Variables para calcular tiempo de inicio
COMIENZO=$(date +%s)
}

f_dependencias(){
echo "$ROSA"Comprobando dependencias ..."$CIERRE"
echo ""
for D in $DEPENDENCIAS; do
BUSCAR=`echo "$(ls /var/log/packages|rev|cut -d '-' -f4-|rev|grep -x $D)"`
if [ -z "$BUSCAR" ]; then
echo "${BLANCO}Dependencia ${AMARILLO}${D} ${ROJO}NO INSTALADA${BLANCO} ...resolviendo${CIERRE}."
UPDATER=`echo "$(find /opt/wifislax64-updaters/* -name ${D}_updater)"`
if [ -z "$UPDATER" ]; then
echo "${BLANCO}No hay updater para ${AMARILLO}${D}${BLANCO},no se puede continuar${CIERRE}."
echo ""
exit 1
else
xterm -e sh -c "yes y | $UPDATER"
VERIFICAR=`echo "$(ls /var/log/packages|rev|cut -d '-' -f4-|rev|grep -x $D)"`
if [ -z "$VERIFICAR" ]; then
echo ""
echo "${ROJO}No se puedo resolver la dependencia ${AMARILLO}${D}${CIERRE}."
echo ""
exit 1
else
echo "${BLANCO}Dependencia ${AMARILLO}${D} ${CYAN}RESUELTA${CIERRE}."
fi
fi
else
echo "${BLANCO}Dependencia ${AMARILLO}${D} ${VERDE}INSTALADA${CIERRE}."
fi
done
}

# Elimina una version anterior
f_eliminaVersion() {
   if [ $PRGNAM = xampp ]; then
   if [ -f /opt/lampp/lampp ]; then
   /opt/lampp/lampp stop
   fi
   fi
   if [ $PRGNAM = metasploit ]; then
   if [ -f /etc/rc.d/rc.metasploit ]; then
   /etc/rc.d/rc.metasploit stop
   fi
   fi

   echo ""
   echo "$ROJO"Eliminando la version del sistema..."$CIERRE"
   removepkg $(ls /var/log/packages|rev|cut -d'-' -f3-|sed 's/-/ /'|rev|grep "^$PRGNAM "|cut -d' ' -f1)
}

# Crea el directorio temporal de trabajo
f_directorioTemporal() {
   TMP=${TMP:-/tmp/build/$PRGNAM}
   PKG=$TMP/package-$PRGNAM
   OUTPUT=${OUTPUT:-/tmp}
   if [ -d $TMP ]; then
   cd $TMP
   find * -type d -print 2>/dev/null | while read line ; do
   rm -rf $TMP/$line
   done
   fi
   rm -rf $PKG
   mkdir -p $TMP $PKG $OUTPUT
   cd $TMP
}

# Hace strip al paquete
f_strip() {
   cd $PKG
   stripdir $PKG 2>/dev/null
}

# Descargar sources
f_download(){
GESTOR="wget -N -L -c -q --show-progress --no-passive-ftp"
if [ $PRGNAM = hydra ]; then
GESTOR="$GESTOR --no-check-certificate "
fi
if [ ! -f $SOURCES ]; then
echo 
echo "$CYAN"Descargando sources de $PRGNAM-$VERSION"$CIERRE"
echo "${ROSA}"
$GESTOR $DOWNLOAD
echo "${CIERRE}"
fi
sleep 1
}

#Preparamos entorno
f_preparar(){
	if [ ! -z $SOURCES ]; then
	echo ""
	echo "$VERDE"Descomprimiendo ..."$CIERRE"
	sleep 1
	rm -rf $PRGNAM-$VERSION
	if [ ! -z $EXTENSION ]; then
	if [ $EXTENSION = zip ]; then
	unzip $SOURCES
	else
	tar xvf $SOURCES || tar xvf $SRCNAM-$VERSION.$EXTENSION || tar xvf $PRGNAM-src-$VERSION.$EXTENSION
	fi
	fi
	cd $TMP/$PRGNAM-$VERSION 2>/dev/null || cd $TMP/$SRCNAM-$VERSION 2>/dev/null || cd $TMP/$PRGNAM 2>/dev/null || cd $TMP/$PRGNAM-$VERSION-$SRCNAM 2>/dev/null || cd $TMP/$SRCNAM 2>/dev/null || cd $TMP/$PRGNAM-$SRCNAM-$VERSION 2>/dev/null    
	fi
	chown -R root:root .
	find -L . \
	\( -perm 777 -o -perm 775 -o -perm 750 -o -perm 711 -o -perm 555 \
	  -o -perm 511 \) -exec chmod 755 {} \; -o \
	\( -perm 666 -o -perm 664 -o -perm 640 -o -perm 600 -o -perm 444 \
	-o -perm 440 -o -perm 400 \) -exec chmod 644 {} \;
}

# Creamos xzm , instalamos y salimos
f_tareasFinales() {
   # Si el sistema tiene una version anterior se eliminara
   if [ "$INSTALADA" != "NO INSTALADA" ]; then
      f_eliminaVersion
   fi
   echo ""
   echo "$VERDE"Instalando y creando modulo xzm ..."$CIERRE"
   sleep 1
   # Guardamos los modulos en carpetas por categoria
   cd ..
   CATEGORIA=`echo "$(find /opt/wifislax64-updaters/* -name ${PRGNAM}_updater| cut -d "/" -f4)"`
   if [ ! -d $HOME/Desktop/$CATEGORIA ]; then
   mkdir -p $HOME/Desktop/$CATEGORIA
   fi

   #Para sigram nos basamos en el log. Para el resto siempre es igual
   if [ $PRGNAM = sigram ]; then
	cleandir $PKG &>/dev/null
	log2xzm $TMP/sigram.log $HOME/Desktop/$CATEGORIA/$PRGNAM-${VERSION}-$ARCH-$BUILD$TAG.xzm
	xzm2dir $HOME/Desktop/$CATEGORIA/$PRGNAM-${VERSION}-$ARCH-$BUILD$TAG.xzm /
   else
	cleandir $PKG &>/dev/null
	dir2xzm $PKG $HOME/Desktop/$CATEGORIA/$PRGNAM-$VERSION-$ARCH-$BUILD$TAG.xzm
	xzm2dir $HOME/Desktop/$CATEGORIA/$PRGNAM-$VERSION-$ARCH-$BUILD$TAG.xzm /
   fi
   # Iniciar algun servicio si existe
   if [ $PRGNAM = teamviewer ]; then
   /etc/rc.d/rc.teamviewerd start &>/dev/null
   fi
   # Variables especiales para renombrar algunos modulos
   WIFISLAX=`cat /etc/wifislax-version|cut -d ' ' -f1`
   if [ $WIFISLAX = wifislax64 ]; then
   JAVANUMBER=011-Extra
   FIRMSNUMBER=012-Extra
   CHROMENUMBER=013-Extra
   else
   JAVANUMBER=008-Extra
   FIRMSNUMBER=011-Extra
   CHROMENUMBER=013-Extra
   fi
   
   if [ $PRGNAM = jdk ]; then
   mv $HOME/Desktop/$CATEGORIA/$PRGNAM-$VERSION-$ARCH-$BUILD$TAG.xzm $HOME/Desktop/$CATEGORIA/${JAVANUMBER}_$PRGNAM-$VERSION-$ARCH-$BUILD$TAG.xzm
   fi

   if [ $PRGNAM = "google-chrome" ]; then
   mv $HOME/Desktop/$CATEGORIA/$PRGNAM-$VERSION-$ARCH-$BUILD$TAG.xzm $HOME/Desktop/$CATEGORIA/${CHROMENUMBER}_$PRGNAM-$VERSION-$ARCH-$BUILD$TAG.xzm
   fi
   
   if [ $PRGNAM = firmwares ]; then
   mv $HOME/Desktop/$CATEGORIA/$PRGNAM-$VERSION-$ARCH-$BUILD$TAG.xzm $HOME/Desktop/$CATEGORIA/${FIRMSNUMBER}_$PRGNAM-$VERSION-$ARCH-$BUILD$TAG.xzm
   fi

   rm -Rf $TMP &>/dev/null
   clear
   
   # Actualizar sistema mimetypes schemas etc
   echo ""$VERDE"Actualizando sistema$BLANCO...$CIERRE"
   
   if [ $PRGNAM = metasploit ]; then
       /etc/rc.d/rc.metasploit start &> /dev/null
   fi

   # Comandos de sistema
   /usr/bin/update-desktop-database -q /usr/share/applications &>/dev/null &
   /usr/bin/update-mime-database /usr/share/mime &>/dev/null &
   /usr/bin/gtk-update-icon-cache /usr/share/icons/hicolor &>/dev/null &
   /usr/bin/glib-compile-schemas /usr/share/glib-2.0/schemas &>/dev/null &
   /usr/bin/fc-cache -f &>/dev/null &
   
   # Informe final
   clear
   echo ""$VERDE"Creado modulo del paquete "$AMARILLO"$PRGNAM-$VERSION"$CIERRE""
   echo ""
   
   # Variables para calcular tiempo de acabado
   AHORA=$(($(date +%s)-3600));
   TIEMPO="$(date --date=@$(($AHORA-$COMIENZO)) +%X)"
   
   # Informe de acabado
   echo "${AMARILLO}Tiempo empleado${BLANCO}: $TIEMPO"
   echo ""
   echo "$VERDE"Bye Bye"$CIERRE"
   echo ""
   
   # Salimos del script
   exit 0
}